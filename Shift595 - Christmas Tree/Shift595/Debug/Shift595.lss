
Shift595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a19  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000292  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047f  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000342  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000796  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	72 c0       	rjmp	.+228    	; 0xea <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	ae c0       	rjmp	.+348    	; 0x174 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ef       	ldi	r30, 0xF8	; 248
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 36       	cpi	r26, 0x6C	; 108
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ac e6       	ldi	r26, 0x6C	; 108
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 37       	cpi	r26, 0x70	; 112
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	9e d0       	rcall	.+316    	; 0x18e <main>
  52:	50 c2       	rjmp	.+1184   	; 0x4f4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z9HC595Initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	87 b3       	in	r24, 0x17	; 23
  58:	8f 60       	ori	r24, 0x0F	; 15
  5a:	87 bb       	out	0x17, r24	; 23
  5c:	c3 98       	cbi	0x18, 3	; 24
  5e:	08 95       	ret

00000060 <_Z10HC595Pulsev>:
  60:	c1 9a       	sbi	0x18, 1	; 24
  62:	c1 98       	cbi	0x18, 1	; 24
  64:	08 95       	ret

00000066 <_Z10HC595Latchv>:
  66:	c2 9a       	sbi	0x18, 2	; 24
  68:	00 00       	nop
  6a:	c2 98       	cbi	0x18, 2	; 24
  6c:	00 00       	nop
  6e:	08 95       	ret

00000070 <_Z10HC595Writeh>:
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	d8 2f       	mov	r29, r24
  76:	c8 e0       	ldi	r28, 0x08	; 8
  78:	dd 23       	and	r29, r29
  7a:	14 f4       	brge	.+4      	; 0x80 <_Z10HC595Writeh+0x10>
  7c:	c0 9a       	sbi	0x18, 0	; 24
  7e:	01 c0       	rjmp	.+2      	; 0x82 <_Z10HC595Writeh+0x12>
  80:	c0 98       	cbi	0x18, 0	; 24
  82:	ee df       	rcall	.-36     	; 0x60 <_Z10HC595Pulsev>
  84:	dd 0f       	add	r29, r29
  86:	c1 50       	subi	r28, 0x01	; 1
  88:	b9 f7       	brne	.-18     	; 0x78 <_Z10HC595Writeh+0x8>
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	08 95       	ret

00000090 <_Z12EEPROM_writehh>:
  90:	e1 99       	sbic	0x1c, 1	; 28
  92:	fe cf       	rjmp	.-4      	; 0x90 <_Z12EEPROM_writehh>
  94:	1f ba       	out	0x1f, r1	; 31
  96:	8e bb       	out	0x1e, r24	; 30
  98:	6d bb       	out	0x1d, r22	; 29
  9a:	f8 94       	cli
  9c:	e2 9a       	sbi	0x1c, 2	; 28
  9e:	e1 9a       	sbi	0x1c, 1	; 28
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <_Z11EEPROM_readh>:
  a4:	e1 99       	sbic	0x1c, 1	; 28
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <_Z11EEPROM_readh>
  a8:	1f ba       	out	0x1f, r1	; 31
  aa:	8e bb       	out	0x1e, r24	; 30
  ac:	e0 9a       	sbi	0x1c, 0	; 28
  ae:	8d b3       	in	r24, 0x1d	; 29
  b0:	08 95       	ret

000000b2 <_Z4Waitv>:
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z4Waitv+0x4>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_Z4Waitv+0xa>
  bc:	00 00       	nop
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <_Z4Waitv+0x10>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_Z4Waitv+0x16>
  c8:	00 00       	nop
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <_Z4Waitv+0x1c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z4Waitv+0x22>
  d4:	00 00       	nop
  d6:	87 ea       	ldi	r24, 0xA7	; 167
  d8:	91 e6       	ldi	r25, 0x61	; 97
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <_Z4Waitv+0x28>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_Z4Waitv+0x2e>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <_Z9writeByteh>:
}

void writeByte(uint8_t byte0)
{

	HC595Write(byte0);
  e4:	c5 df       	rcall	.-118    	; 0x70 <_Z10HC595Writeh>
	HC595Latch();
  e6:	bf df       	rcall	.-130    	; 0x66 <_Z10HC595Latchv>
  e8:	08 95       	ret

000000ea <__vector_2>:
}

ISR(PCINT0_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	if (((PINB&(1<<BTN)) == 0x00) && (coolDown == 0x00))
 10c:	b4 99       	sbic	0x16, 4	; 22
 10e:	21 c0       	rjmp	.+66     	; 0x152 <__vector_2+0x68>
 110:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 114:	88 23       	and	r24, r24
 116:	79 f0       	breq	.+30     	; 0x136 <__vector_2+0x4c>
 118:	1c c0       	rjmp	.+56     	; 0x152 <__vector_2+0x68>
	{
		mode++;
		j = 0x00; 
		i = 0x00;
		if (mode >= MAXMODE){ //Max mode options - 1
			mode = 0;
 11a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <mode>
		}
		//Set up Timer1 for btn cool down
		EEPROM_write(0x07, mode); 
 11e:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <mode>
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	b5 df       	rcall	.-150    	; 0x90 <_Z12EEPROM_writehh>
		TCCR0B = (2 << CS00);              //div8
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	83 bf       	out	0x33, r24	; 51
		OCR0B = F_CPU/8 * 0.000500 - 1;    // 500us compare value
 12a:	8d e3       	ldi	r24, 0x3D	; 61
 12c:	88 bd       	out	0x28, r24	; 40
		TIMSK |= (1<<OCIE0B);              //if you want interrupt
 12e:	89 b7       	in	r24, 0x39	; 57
 130:	88 60       	ori	r24, 0x08	; 8
 132:	89 bf       	out	0x39, r24	; 57
	}
}
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_2+0x68>

ISR(PCINT0_vect)
{
	if (((PINB&(1<<BTN)) == 0x00) && (coolDown == 0x00))
	{
		mode++;
 136:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <mode>
		j = 0x00; 
 140:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <j>
		i = 0x00;
 144:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <i>
		if (mode >= MAXMODE){ //Max mode options - 1
 148:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <MAXMODE>
 14c:	89 17       	cp	r24, r25
 14e:	28 f7       	brcc	.-54     	; 0x11a <__vector_2+0x30>
 150:	e6 cf       	rjmp	.-52     	; 0x11e <__vector_2+0x34>
		EEPROM_write(0x07, mode); 
		TCCR0B = (2 << CS00);              //div8
		OCR0B = F_CPU/8 * 0.000500 - 1;    // 500us compare value
		TIMSK |= (1<<OCIE0B);              //if you want interrupt
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_11>:

ISR(TIMER0_COMPB_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
	//Cool Down timer complete
	coolDown = 0x00;
 17e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	TIMSK = 0x00;  //Stop the counter
 182:	19 be       	out	0x39, r1	; 57
	//EEPROM_write(0x07, mode); // Save mode for next power up
}
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:

int main()
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	2b 97       	sbiw	r28, 0x0b	; 11
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	HC595Init();
 1a2:	59 df       	rcall	.-334    	; 0x56 <_Z9HC595Initv>
	PORTB ^= (1<<BTN); //Btn 
 1a4:	98 b3       	in	r25, 0x18	; 24
 1a6:	80 e1       	ldi	r24, 0x10	; 16
 1a8:	89 27       	eor	r24, r25
 1aa:	88 bb       	out	0x18, r24	; 24
	//PORTB ^= (1<<HC595_OE_POS);
	DDRB ^= (1<<HC595_OE_POS);
 1ac:	97 b3       	in	r25, 0x17	; 23
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	89 27       	eor	r24, r25
 1b2:	87 bb       	out	0x17, r24	; 23
	uint8_t pattern1 = 1;
	uint8_t pattern2[] = {0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F};
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	e5 e6       	ldi	r30, 0x65	; 101
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	8a 95       	dec	r24
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x30>
	uint8_t pattern3[] = {0x7D, 0xBB, 0xD7, 0xEF};
 1c6:	8d e7       	ldi	r24, 0x7D	; 125
 1c8:	88 87       	std	Y+8, r24	; 0x08
 1ca:	8b eb       	ldi	r24, 0xBB	; 187
 1cc:	89 87       	std	Y+9, r24	; 0x09
 1ce:	87 ed       	ldi	r24, 0xD7	; 215
 1d0:	8a 87       	std	Y+10, r24	; 0x0a
 1d2:	8f ee       	ldi	r24, 0xEF	; 239
 1d4:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t pattern4[] = {0xFB,0xF3,0xD3,0x53,0x13,0x03,0x01};
	uint8_t pattern5[] = {0xFF, 0x00};
	mode = EEPROM_read(0x07); // Read mode selection from last power cycle
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	65 df       	rcall	.-310    	; 0xa4 <_Z11EEPROM_readh>
 1da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <mode>
	MAXMODE = 7;
 1de:	97 e0       	ldi	r25, 0x07	; 7
 1e0:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <MAXMODE>
	if(mode > MAXMODE){ //catch any errors in EEPROM
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <main+0x5e>
		mode = 0x00;
 1e8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <mode>
	}
	
	
	GIMSK |= (1<<PCIE);		
 1ec:	8b b7       	in	r24, 0x3b	; 59
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<BTN);
 1f2:	ac 9a       	sbi	0x15, 4	; 21
	sei();
 1f4:	78 94       	sei
{
	HC595Init();
	PORTB ^= (1<<BTN); //Btn 
	//PORTB ^= (1<<HC595_OE_POS);
	DDRB ^= (1<<HC595_OE_POS);
	uint8_t pattern1 = 1;
 1f6:	11 e0       	ldi	r17, 0x01	; 1
		}
		if (mode == 5)
		{
			if ((i == 0x80) || (i == 0x00))
			{
				i = 1;
 1f8:	01 e0       	ldi	r16, 0x01	; 1
	//uint8_t j = 0;
	
		
	while(1)
	{		
		j++;
 1fa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <j>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <j>
		if (mode == 4)
 204:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	19 f4       	brne	.+6      	; 0x212 <main+0x84>
		{
			writeByte(0xFF);
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	6a df       	rcall	.-300    	; 0xe4 <_Z9writeByteh>
			Wait();			
 210:	50 df       	rcall	.-352    	; 0xb2 <_Z4Waitv>
		}
		if (mode == 1)
 212:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	59 f4       	brne	.+22     	; 0x230 <main+0xa2>
		{
			writeByte(0xFF);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	63 df       	rcall	.-314    	; 0xe4 <_Z9writeByteh>
			if(j == 4){
 21e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <j>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	21 f4       	brne	.+8      	; 0x22e <main+0xa0>
				writeByte(0xFE);
 226:	8e ef       	ldi	r24, 0xFE	; 254
 228:	5d df       	rcall	.-326    	; 0xe4 <_Z9writeByteh>
				j = 0;
 22a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <j>
			}
			Wait();
 22e:	41 df       	rcall	.-382    	; 0xb2 <_Z4Waitv>
		}
		if (mode == 2)
 230:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	71 f5       	brne	.+92     	; 0x294 <__stack+0x35>
		{
			writeByte(0xFF);
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	54 df       	rcall	.-344    	; 0xe4 <_Z9writeByteh>
			if(j == 4){
 23c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <j>
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	b1 f4       	brne	.+44     	; 0x270 <__stack+0x11>
				writeByte(pattern2[i]);
 244:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 248:	e1 e0       	ldi	r30, 0x01	; 1
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	ec 0f       	add	r30, r28
 24e:	fd 1f       	adc	r31, r29
 250:	e8 0f       	add	r30, r24
 252:	f1 1d       	adc	r31, r1
 254:	80 81       	ld	r24, Z
 256:	46 df       	rcall	.-372    	; 0xe4 <_Z9writeByteh>
				j = 0;
 258:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <j>
				i++;
 25c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 260:	8f 5f       	subi	r24, 0xFF	; 255
				if (i==7)
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	19 f0       	breq	.+6      	; 0x26c <__stack+0xd>
		{
			writeByte(0xFF);
			if(j == 4){
				writeByte(pattern2[i]);
				j = 0;
				i++;
 266:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <i>
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__stack+0x11>
				if (i==7)
				{
					i =0;
 26c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <i>
 270:	87 ea       	ldi	r24, 0xA7	; 167
 272:	91 e6       	ldi	r25, 0x61	; 97
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <__stack+0x15>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__stack+0x1b>
 27a:	00 00       	nop
 27c:	87 ea       	ldi	r24, 0xA7	; 167
 27e:	91 e6       	ldi	r25, 0x61	; 97
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <__stack+0x21>
 284:	00 c0       	rjmp	.+0      	; 0x286 <__stack+0x27>
 286:	00 00       	nop
 288:	87 ea       	ldi	r24, 0xA7	; 167
 28a:	91 e6       	ldi	r25, 0x61	; 97
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <__stack+0x2d>
 290:	00 c0       	rjmp	.+0      	; 0x292 <__stack+0x33>
 292:	00 00       	nop
			}
			Wait_short();
			Wait_short();
			Wait_short();
		}
		if (mode == 3)
 294:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	e9 f4       	brne	.+58     	; 0x2d6 <__stack+0x77>
		{
			writeByte(0xFF);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	22 df       	rcall	.-444    	; 0xe4 <_Z9writeByteh>
			if(j == 4){
 2a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <j>
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	b1 f4       	brne	.+44     	; 0x2d4 <__stack+0x75>
				writeByte(pattern3[i]);
 2a8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 2ac:	e8 e0       	ldi	r30, 0x08	; 8
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	e8 0f       	add	r30, r24
 2b6:	f1 1d       	adc	r31, r1
 2b8:	80 81       	ld	r24, Z
 2ba:	14 df       	rcall	.-472    	; 0xe4 <_Z9writeByteh>
				j = 0;
 2bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <j>
				i++;
 2c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
				if (i==4)
 2c6:	84 30       	cpi	r24, 0x04	; 4
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <__stack+0x71>
		{
			writeByte(0xFF);
			if(j == 4){
				writeByte(pattern3[i]);
				j = 0;
				i++;
 2ca:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <i>
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <__stack+0x75>
				if (i==4)
				{
					i =0;
 2d0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <i>
				}
			}
			Wait();
 2d4:	ee de       	rcall	.-548    	; 0xb2 <_Z4Waitv>
		}
		if (mode == 0)
 2d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 2da:	81 11       	cpse	r24, r1
 2dc:	21 c0       	rjmp	.+66     	; 0x320 <__stack+0xc1>
		{
			pattern1++;
 2de:	1f 5f       	subi	r17, 0xFF	; 255
			writeByte(pattern1);
 2e0:	81 2f       	mov	r24, r17
 2e2:	00 df       	rcall	.-512    	; 0xe4 <_Z9writeByteh>
 2e4:	87 ea       	ldi	r24, 0xA7	; 167
 2e6:	91 e6       	ldi	r25, 0x61	; 97
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <__stack+0x89>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <__stack+0x8f>
 2ee:	00 00       	nop
 2f0:	87 ea       	ldi	r24, 0xA7	; 167
 2f2:	91 e6       	ldi	r25, 0x61	; 97
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <__stack+0x95>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <__stack+0x9b>
 2fa:	00 00       	nop
 2fc:	87 ea       	ldi	r24, 0xA7	; 167
 2fe:	91 e6       	ldi	r25, 0x61	; 97
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <__stack+0xa1>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__stack+0xa7>
 306:	00 00       	nop
 308:	87 ea       	ldi	r24, 0xA7	; 167
 30a:	91 e6       	ldi	r25, 0x61	; 97
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <__stack+0xad>
 310:	00 c0       	rjmp	.+0      	; 0x312 <__stack+0xb3>
 312:	00 00       	nop
 314:	87 ea       	ldi	r24, 0xA7	; 167
 316:	91 e6       	ldi	r25, 0x61	; 97
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <__stack+0xb9>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <__stack+0xbf>
 31e:	00 00       	nop
			Wait_short();
			Wait_short();
			Wait_short();
			Wait_short();
		}
		if (mode == 5)
 320:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 324:	85 30       	cpi	r24, 0x05	; 5
 326:	69 f5       	brne	.+90     	; 0x382 <__stack+0x123>
		{
			if ((i == 0x80) || (i == 0x00))
 328:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	11 f4       	brne	.+4      	; 0x334 <__stack+0xd5>
			{
				i = 1;
 330:	00 93 6d 00 	sts	0x006D, r16	; 0x80006d <i>
			}
			i = i<<1;
 334:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <i>
 338:	88 0f       	add	r24, r24
 33a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <i>
			j= i | 0x01;
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <j>
			writeByte(j);
 344:	cf de       	rcall	.-610    	; 0xe4 <_Z9writeByteh>
 346:	87 ea       	ldi	r24, 0xA7	; 167
 348:	91 e6       	ldi	r25, 0x61	; 97
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <__stack+0xeb>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <__stack+0xf1>
 350:	00 00       	nop
 352:	87 ea       	ldi	r24, 0xA7	; 167
 354:	91 e6       	ldi	r25, 0x61	; 97
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <__stack+0xf7>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <__stack+0xfd>
 35c:	00 00       	nop
 35e:	87 ea       	ldi	r24, 0xA7	; 167
 360:	91 e6       	ldi	r25, 0x61	; 97
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <__stack+0x103>
 366:	00 c0       	rjmp	.+0      	; 0x368 <__stack+0x109>
 368:	00 00       	nop
 36a:	87 ea       	ldi	r24, 0xA7	; 167
 36c:	91 e6       	ldi	r25, 0x61	; 97
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <__stack+0x10f>
 372:	00 c0       	rjmp	.+0      	; 0x374 <__stack+0x115>
 374:	00 00       	nop
 376:	87 ea       	ldi	r24, 0xA7	; 167
 378:	91 e6       	ldi	r25, 0x61	; 97
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <__stack+0x11b>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <__stack+0x121>
 380:	00 00       	nop
			Wait_short();
			Wait_short();
			Wait_short();
			Wait_short();
		}
		if (mode == 6)
 382:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <mode>
 386:	86 30       	cpi	r24, 0x06	; 6
 388:	09 f0       	breq	.+2      	; 0x38c <__stack+0x12d>
 38a:	37 cf       	rjmp	.-402    	; 0x1fa <main+0x6c>
		{
			writeByte(rand());
 38c:	4d d0       	rcall	.+154    	; 0x428 <rand>
 38e:	aa de       	rcall	.-684    	; 0xe4 <_Z9writeByteh>
			Wait();
 390:	90 de       	rcall	.-736    	; 0xb2 <_Z4Waitv>
 392:	33 cf       	rjmp	.-410    	; 0x1fa <main+0x6c>

00000394 <do_rand>:
 394:	8f 92       	push	r8
 396:	9f 92       	push	r9
 398:	af 92       	push	r10
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
 3aa:	68 81       	ld	r22, Y
 3ac:	79 81       	ldd	r23, Y+1	; 0x01
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	9b 81       	ldd	r25, Y+3	; 0x03
 3b2:	61 15       	cp	r22, r1
 3b4:	71 05       	cpc	r23, r1
 3b6:	81 05       	cpc	r24, r1
 3b8:	91 05       	cpc	r25, r1
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <do_rand+0x30>
 3bc:	64 e2       	ldi	r22, 0x24	; 36
 3be:	79 ed       	ldi	r23, 0xD9	; 217
 3c0:	8b e5       	ldi	r24, 0x5B	; 91
 3c2:	97 e0       	ldi	r25, 0x07	; 7
 3c4:	2d e1       	ldi	r18, 0x1D	; 29
 3c6:	33 ef       	ldi	r19, 0xF3	; 243
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	55 d0       	rcall	.+170    	; 0x478 <__divmodsi4>
 3ce:	49 01       	movw	r8, r18
 3d0:	5a 01       	movw	r10, r20
 3d2:	27 ea       	ldi	r18, 0xA7	; 167
 3d4:	31 e4       	ldi	r19, 0x41	; 65
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	35 d0       	rcall	.+106    	; 0x446 <__mulsi3>
 3dc:	6b 01       	movw	r12, r22
 3de:	7c 01       	movw	r14, r24
 3e0:	2c ee       	ldi	r18, 0xEC	; 236
 3e2:	34 ef       	ldi	r19, 0xF4	; 244
 3e4:	4f ef       	ldi	r20, 0xFF	; 255
 3e6:	5f ef       	ldi	r21, 0xFF	; 255
 3e8:	c5 01       	movw	r24, r10
 3ea:	b4 01       	movw	r22, r8
 3ec:	2c d0       	rcall	.+88     	; 0x446 <__mulsi3>
 3ee:	dc 01       	movw	r26, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	8c 0d       	add	r24, r12
 3f4:	9d 1d       	adc	r25, r13
 3f6:	ae 1d       	adc	r26, r14
 3f8:	bf 1d       	adc	r27, r15
 3fa:	b7 ff       	sbrs	r27, 7
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	a1 09       	sbc	r26, r1
 402:	b0 48       	sbci	r27, 0x80	; 128
 404:	88 83       	st	Y, r24
 406:	99 83       	std	Y+1, r25	; 0x01
 408:	aa 83       	std	Y+2, r26	; 0x02
 40a:	bb 83       	std	Y+3, r27	; 0x03
 40c:	9f 77       	andi	r25, 0x7F	; 127
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	cf 90       	pop	r12
 41a:	bf 90       	pop	r11
 41c:	af 90       	pop	r10
 41e:	9f 90       	pop	r9
 420:	8f 90       	pop	r8
 422:	08 95       	ret

00000424 <rand_r>:
 424:	b7 df       	rcall	.-146    	; 0x394 <do_rand>
 426:	08 95       	ret

00000428 <rand>:
 428:	80 e6       	ldi	r24, 0x60	; 96
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	b3 df       	rcall	.-154    	; 0x394 <do_rand>
 42e:	08 95       	ret

00000430 <srand>:
 430:	a0 e0       	ldi	r26, 0x00	; 0
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 438:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 43c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 440:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 444:	08 95       	ret

00000446 <__mulsi3>:
 446:	ee 27       	eor	r30, r30
 448:	ff 27       	eor	r31, r31

0000044a <__mulsi3_helper>:
 44a:	aa 27       	eor	r26, r26
 44c:	bb 27       	eor	r27, r27
 44e:	08 c0       	rjmp	.+16     	; 0x460 <__mulsi3_helper+0x16>
 450:	a2 0f       	add	r26, r18
 452:	b3 1f       	adc	r27, r19
 454:	e4 1f       	adc	r30, r20
 456:	f5 1f       	adc	r31, r21
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	44 1f       	adc	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	98 f3       	brcs	.-26     	; 0x450 <__mulsi3_helper+0x6>
 46a:	70 40       	sbci	r23, 0x00	; 0
 46c:	a9 f7       	brne	.-22     	; 0x458 <__mulsi3_helper+0xe>
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	99 f7       	brne	.-26     	; 0x458 <__mulsi3_helper+0xe>
 472:	bd 01       	movw	r22, r26
 474:	cf 01       	movw	r24, r30
 476:	08 95       	ret

00000478 <__divmodsi4>:
 478:	05 2e       	mov	r0, r21
 47a:	97 fb       	bst	r25, 7
 47c:	16 f4       	brtc	.+4      	; 0x482 <__divmodsi4+0xa>
 47e:	00 94       	com	r0
 480:	0f d0       	rcall	.+30     	; 0x4a0 <__negsi2>
 482:	57 fd       	sbrc	r21, 7
 484:	05 d0       	rcall	.+10     	; 0x490 <__divmodsi4_neg2>
 486:	14 d0       	rcall	.+40     	; 0x4b0 <__udivmodsi4>
 488:	07 fc       	sbrc	r0, 7
 48a:	02 d0       	rcall	.+4      	; 0x490 <__divmodsi4_neg2>
 48c:	46 f4       	brtc	.+16     	; 0x49e <__divmodsi4_exit>
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__negsi2>

00000490 <__divmodsi4_neg2>:
 490:	50 95       	com	r21
 492:	40 95       	com	r20
 494:	30 95       	com	r19
 496:	21 95       	neg	r18
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	4f 4f       	sbci	r20, 0xFF	; 255
 49c:	5f 4f       	sbci	r21, 0xFF	; 255

0000049e <__divmodsi4_exit>:
 49e:	08 95       	ret

000004a0 <__negsi2>:
 4a0:	90 95       	com	r25
 4a2:	80 95       	com	r24
 4a4:	70 95       	com	r23
 4a6:	61 95       	neg	r22
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	8f 4f       	sbci	r24, 0xFF	; 255
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	08 95       	ret

000004b0 <__udivmodsi4>:
 4b0:	a1 e2       	ldi	r26, 0x21	; 33
 4b2:	1a 2e       	mov	r1, r26
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	fd 01       	movw	r30, r26
 4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <__udivmodsi4_ep>

000004bc <__udivmodsi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	ee 1f       	adc	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	a2 17       	cp	r26, r18
 4c6:	b3 07       	cpc	r27, r19
 4c8:	e4 07       	cpc	r30, r20
 4ca:	f5 07       	cpc	r31, r21
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__udivmodsi4_ep>
 4ce:	a2 1b       	sub	r26, r18
 4d0:	b3 0b       	sbc	r27, r19
 4d2:	e4 0b       	sbc	r30, r20
 4d4:	f5 0b       	sbc	r31, r21

000004d6 <__udivmodsi4_ep>:
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a 94       	dec	r1
 4e0:	69 f7       	brne	.-38     	; 0x4bc <__udivmodsi4_loop>
 4e2:	60 95       	com	r22
 4e4:	70 95       	com	r23
 4e6:	80 95       	com	r24
 4e8:	90 95       	com	r25
 4ea:	9b 01       	movw	r18, r22
 4ec:	ac 01       	movw	r20, r24
 4ee:	bd 01       	movw	r22, r26
 4f0:	cf 01       	movw	r24, r30
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
