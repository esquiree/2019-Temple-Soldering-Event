
Shift595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f0  008000f0  00000a76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad8  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e4  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055a  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000346  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ee  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	94 c0       	rjmp	.+296    	; 0x140 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e5       	ldi	r30, 0x52	; 82
  32:	f9 e0       	ldi	r31, 0x09	; 9
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 3f       	cpi	r26, 0xF0	; 240
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 ef       	ldi	r26, 0xF0	; 240
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 3f       	cpi	r26, 0xF3	; 243
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a0 d0       	rcall	.+320    	; 0x192 <main>
  52:	7d c4       	rjmp	.+2298   	; 0x94e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z9HC595Initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	87 b3       	in	r24, 0x17	; 23
  58:	8f 60       	ori	r24, 0x0F	; 15
  5a:	87 bb       	out	0x17, r24	; 23
  5c:	c3 98       	cbi	0x18, 3	; 24
  5e:	08 95       	ret

00000060 <_Z10HC595Pulsev>:
  60:	c1 9a       	sbi	0x18, 1	; 24
  62:	c1 98       	cbi	0x18, 1	; 24
  64:	08 95       	ret

00000066 <_Z10HC595Latchv>:
  66:	c2 9a       	sbi	0x18, 2	; 24
  68:	00 00       	nop
  6a:	c2 98       	cbi	0x18, 2	; 24
  6c:	00 00       	nop
  6e:	08 95       	ret

00000070 <_Z10HC595Writeh>:
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	d8 2f       	mov	r29, r24
  76:	c8 e0       	ldi	r28, 0x08	; 8
  78:	dd 23       	and	r29, r29
  7a:	14 f4       	brge	.+4      	; 0x80 <_Z10HC595Writeh+0x10>
  7c:	c0 9a       	sbi	0x18, 0	; 24
  7e:	01 c0       	rjmp	.+2      	; 0x82 <_Z10HC595Writeh+0x12>
  80:	c0 98       	cbi	0x18, 0	; 24
  82:	ee df       	rcall	.-36     	; 0x60 <_Z10HC595Pulsev>
  84:	dd 0f       	add	r29, r29
  86:	c1 50       	subi	r28, 0x01	; 1
  88:	b9 f7       	brne	.-18     	; 0x78 <_Z10HC595Writeh+0x8>
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	08 95       	ret

00000090 <_Z11write5Byteshhhhh>:
	//}
	//return 0;
//}

void write5Bytes(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4)
{
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	c8 2f       	mov	r28, r24
  9c:	d6 2f       	mov	r29, r22
  9e:	14 2f       	mov	r17, r20
  a0:	f2 2e       	mov	r15, r18
  a2:	80 2f       	mov	r24, r16
	HC595Write(byte4);
  a4:	e5 df       	rcall	.-54     	; 0x70 <_Z10HC595Writeh>
	HC595Write(byte3);
  a6:	8f 2d       	mov	r24, r15
  a8:	e3 df       	rcall	.-58     	; 0x70 <_Z10HC595Writeh>
	HC595Write(byte2);
  aa:	81 2f       	mov	r24, r17
  ac:	e1 df       	rcall	.-62     	; 0x70 <_Z10HC595Writeh>
	HC595Write(byte1);
  ae:	8d 2f       	mov	r24, r29
  b0:	df df       	rcall	.-66     	; 0x70 <_Z10HC595Writeh>
	HC595Write(byte0);
  b2:	8c 2f       	mov	r24, r28
  b4:	dd df       	rcall	.-70     	; 0x70 <_Z10HC595Writeh>
	HC595Latch();
  b6:	d7 df       	rcall	.-82     	; 0x66 <_Z10HC595Latchv>
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	ff 90       	pop	r15
  c2:	08 95       	ret

000000c4 <_Z12EEPROM_writehh>:

void EEPROM_write(uint8_t uiAddress, uint8_t ucData) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE));    /* Wait for completion of previous write */
  c4:	e1 99       	sbic	0x1c, 1	; 28
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <_Z12EEPROM_writehh>
	EEARH = 0x00;
  c8:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
  ca:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  cc:	6d bb       	out	0x1d, r22	; 29
	cli();
  ce:	f8 94       	cli
	EECR |= (1<<EEMPE);     /* Write logical one to EEMPE */
  d0:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE);      /* Start eeprom write by setting EEPE */
  d2:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <_Z11EEPROM_readh>:
}
unsigned char EEPROM_read(uint8_t uiAddress) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE)); /* Wait for completion of previous write */
  d8:	e1 99       	sbic	0x1c, 1	; 28
  da:	fe cf       	rjmp	.-4      	; 0xd8 <_Z11EEPROM_readh>

	EEARH = (uiAddress>>8);  /* Set up address register */
  dc:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
  de:	8e bb       	out	0x1e, r24	; 30

	EECR |= (1<<EERE);       /* Start eeprom read by writing EERE */
  e0:	e0 9a       	sbi	0x1c, 0	; 28

	return EEDR;             /* Return data from Data Register */
  e2:	8d b3       	in	r24, 0x1d	; 29
}
  e4:	08 95       	ret

000000e6 <__vector_2>:


ISR(PCINT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	if (((PINB&(1<<PB4)) == 0x00) && (coolDown == 0x00))
  f4:	b4 99       	sbic	0x16, 4	; 22
  f6:	1d c0       	rjmp	.+58     	; 0x132 <__vector_2+0x4c>
  f8:	80 91 f0 00 	lds	r24, 0x00F0
  fc:	88 23       	and	r24, r24
  fe:	71 f0       	breq	.+28     	; 0x11c <__vector_2+0x36>
 100:	18 c0       	rjmp	.+48     	; 0x132 <__vector_2+0x4c>
	{
		mode++;
		j = 0xFD; //Exit current mode loop
		//coolDown = 0x0F;
		if (mode >= 7){ //Max mode options - 1
			mode = 0;
 102:	10 92 f2 00 	sts	0x00F2, r1
		}
		//Set up Timer1 for btn cool down
		coolDown = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 f0 00 	sts	0x00F0, r24
		TCCR0B = (2 << CS00);              //div8
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	83 bf       	out	0x33, r24	; 51
		OCR0B = F_CPU/8 * 0.000500 - 1;    // 500us compare value
 110:	8d e3       	ldi	r24, 0x3D	; 61
 112:	88 bd       	out	0x28, r24	; 40
		TIMSK |= (1<<OCIE0B);              //if you want interrupt
 114:	89 b7       	in	r24, 0x39	; 57
 116:	88 60       	ori	r24, 0x08	; 8
 118:	89 bf       	out	0x39, r24	; 57
 11a:	0b c0       	rjmp	.+22     	; 0x132 <__vector_2+0x4c>

ISR(PCINT0_vect)
{
	if (((PINB&(1<<PB4)) == 0x00) && (coolDown == 0x00))
	{
		mode++;
 11c:	80 91 f2 00 	lds	r24, 0x00F2
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 f2 00 	sts	0x00F2, r24
		j = 0xFD; //Exit current mode loop
 126:	9d ef       	ldi	r25, 0xFD	; 253
 128:	90 93 f1 00 	sts	0x00F1, r25
		//coolDown = 0x0F;
		if (mode >= 7){ //Max mode options - 1
 12c:	87 30       	cpi	r24, 0x07	; 7
 12e:	48 f7       	brcc	.-46     	; 0x102 <__vector_2+0x1c>
 130:	ea cf       	rjmp	.-44     	; 0x106 <__vector_2+0x20>
		coolDown = 1;
		TCCR0B = (2 << CS00);              //div8
		OCR0B = F_CPU/8 * 0.000500 - 1;    // 500us compare value
		TIMSK |= (1<<OCIE0B);              //if you want interrupt
	}
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_11>:

ISR(TIMER0_COMPB_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	//Cool Down timer complete
	coolDown = 0x00;
 162:	10 92 f0 00 	sts	0x00F0, r1
	TIMSK = 0x00;  //Stop the counter
 166:	19 be       	out	0x39, r1	; 57
	EEPROM_write(0x07, mode); // Save mode for next power up
 168:	60 91 f2 00 	lds	r22, 0x00F2
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	aa df       	rcall	.-172    	; 0xc4 <_Z12EEPROM_writehh>
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:



int main()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	c0 59       	subi	r28, 0x90	; 144
 19c:	d1 09       	sbc	r29, r1
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
	uint64_t line_pattern1[] = {0x00001F000000, 0x000060C00000, 0x000080200000, 0x000100100000, 0x00220008C001, 0x1C00072002, 0x000000001004, 0x000000000FF8, 0x0};
 1a8:	88 e4       	ldi	r24, 0x48	; 72
 1aa:	e0 e6       	ldi	r30, 0x60	; 96
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	de 01       	movw	r26, r28
 1b0:	a7 5b       	subi	r26, 0xB7	; 183
 1b2:	bf 4f       	sbci	r27, 0xFF	; 255
 1b4:	01 90       	ld	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	8a 95       	dec	r24
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x22>
	uint64_t line_pattern2[] = {0x00001F000000, 0x00007FC00000, 0x0000FFE00000, 0x0001FFF00000, 0x0023FFF8C001, 0x007FFFFFE003, 0x00FFFFFFF007, 0x00FFFFFFFFFF, 0x0};
 1bc:	88 e4       	ldi	r24, 0x48	; 72
 1be:	e8 ea       	ldi	r30, 0xA8	; 168
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	de 01       	movw	r26, r28
 1c4:	11 96       	adiw	r26, 0x01	; 1
 1c6:	01 90       	ld	r0, Z+
 1c8:	0d 92       	st	X+, r0
 1ca:	8a 95       	dec	r24
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x34>
	HC595Init();
 1ce:	43 df       	rcall	.-378    	; 0x56 <_Z9HC595Initv>
	
	PORTB ^= (1<<PB4); //Btn 
 1d0:	98 b3       	in	r25, 0x18	; 24
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	89 27       	eor	r24, r25
 1d6:	88 bb       	out	0x18, r24	; 24
	mode = EEPROM_read(0x07); // Read mode selection from last power cycle
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	7e df       	rcall	.-260    	; 0xd8 <_Z11EEPROM_readh>
 1dc:	80 93 f2 00 	sts	0x00F2, r24
	if(mode > 0x08){ //catch any errors in EEPROM
 1e0:	89 30       	cpi	r24, 0x09	; 9
 1e2:	10 f0       	brcs	.+4      	; 0x1e8 <main+0x56>
		mode = 0x00;
 1e4:	10 92 f2 00 	sts	0x00F2, r1
	}
	
	
	GIMSK |= (1<<PCIE);
 1e8:	8b b7       	in	r24, 0x3b	; 59
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PB4);
 1ee:	ac 9a       	sbi	0x15, 4	; 21
	sei();
 1f0:	78 94       	sei
 1f2:	0f 2e       	mov	r0, r31
 1f4:	ff e0       	ldi	r31, 0x0F	; 15
 1f6:	7f 2e       	mov	r7, r31
 1f8:	f0 2d       	mov	r31, r0
		  
	while(1)
	{		
		if (mode == 0)
 1fa:	e0 91 f2 00 	lds	r30, 0x00F2
 1fe:	e1 11       	cpse	r30, r1
 200:	4a c3       	rjmp	.+1684   	; 0x896 <__FUSE_REGION_LENGTH__+0x496>
		{
			for (j=0;j<9;j++)
 202:	10 92 f1 00 	sts	0x00F1, r1
			{
				write5Bytes(line_pattern1[j],line_pattern1[j]>>8,line_pattern1[j]>>16,line_pattern1[j]>>24,line_pattern1[j]>>32);
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	89 e4       	ldi	r24, 0x49	; 73
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	8c 0f       	add	r24, r28
 21a:	9d 1f       	adc	r25, r29
 21c:	e8 0f       	add	r30, r24
 21e:	f9 1f       	adc	r31, r25
 220:	a0 81       	ld	r26, Z
 222:	b1 80       	ldd	r11, Z+1	; 0x01
 224:	c2 80       	ldd	r12, Z+2	; 0x02
 226:	d3 80       	ldd	r13, Z+3	; 0x03
 228:	e4 80       	ldd	r14, Z+4	; 0x04
 22a:	f5 80       	ldd	r15, Z+5	; 0x05
 22c:	b6 81       	ldd	r27, Z+6	; 0x06
 22e:	e7 81       	ldd	r30, Z+7	; 0x07
 230:	2a 2f       	mov	r18, r26
 232:	3b 2d       	mov	r19, r11
 234:	4c 2d       	mov	r20, r12
 236:	5d 2d       	mov	r21, r13
 238:	6e 2d       	mov	r22, r14
 23a:	7f 2d       	mov	r23, r15
 23c:	8b 2f       	mov	r24, r27
 23e:	9e 2f       	mov	r25, r30
 240:	00 e2       	ldi	r16, 0x20	; 32
 242:	51 d3       	rcall	.+1698   	; 0x8e6 <__lshrdi3>
 244:	92 2e       	mov	r9, r18
 246:	2a 2f       	mov	r18, r26
 248:	3b 2d       	mov	r19, r11
 24a:	4c 2d       	mov	r20, r12
 24c:	5d 2d       	mov	r21, r13
 24e:	6e 2d       	mov	r22, r14
 250:	7f 2d       	mov	r23, r15
 252:	8b 2f       	mov	r24, r27
 254:	9e 2f       	mov	r25, r30
 256:	08 e1       	ldi	r16, 0x18	; 24
 258:	46 d3       	rcall	.+1676   	; 0x8e6 <__lshrdi3>
 25a:	a2 2e       	mov	r10, r18
 25c:	2a 2f       	mov	r18, r26
 25e:	3b 2d       	mov	r19, r11
 260:	4c 2d       	mov	r20, r12
 262:	5d 2d       	mov	r21, r13
 264:	6e 2d       	mov	r22, r14
 266:	7f 2d       	mov	r23, r15
 268:	8b 2f       	mov	r24, r27
 26a:	9e 2f       	mov	r25, r30
 26c:	00 e1       	ldi	r16, 0x10	; 16
 26e:	3b d3       	rcall	.+1654   	; 0x8e6 <__lshrdi3>
 270:	f2 2f       	mov	r31, r18
 272:	2a 2f       	mov	r18, r26
 274:	3b 2d       	mov	r19, r11
 276:	4c 2d       	mov	r20, r12
 278:	5d 2d       	mov	r21, r13
 27a:	6e 2d       	mov	r22, r14
 27c:	7f 2d       	mov	r23, r15
 27e:	8b 2f       	mov	r24, r27
 280:	9e 2f       	mov	r25, r30
 282:	08 e0       	ldi	r16, 0x08	; 8
 284:	30 d3       	rcall	.+1632   	; 0x8e6 <__lshrdi3>
 286:	62 2f       	mov	r22, r18
 288:	09 2d       	mov	r16, r9
 28a:	2a 2d       	mov	r18, r10
 28c:	4f 2f       	mov	r20, r31
 28e:	8a 2f       	mov	r24, r26
 290:	ff de       	rcall	.-514    	; 0x90 <_Z11write5Byteshhhhh>
 292:	83 ed       	ldi	r24, 0xD3	; 211
 294:	90 e3       	ldi	r25, 0x30	; 48
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <__stack+0x37>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <__stack+0x3d>
 29c:	00 00       	nop
 29e:	83 ed       	ldi	r24, 0xD3	; 211
 2a0:	90 e3       	ldi	r25, 0x30	; 48
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <__stack+0x43>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <__stack+0x49>
 2a8:	00 00       	nop
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e3       	ldi	r25, 0x30	; 48
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <__stack+0x4f>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__stack+0x55>
 2b4:	00 00       	nop
		  
	while(1)
	{		
		if (mode == 0)
		{
			for (j=0;j<9;j++)
 2b6:	e0 91 f1 00 	lds	r30, 0x00F1
 2ba:	ef 5f       	subi	r30, 0xFF	; 255
 2bc:	e0 93 f1 00 	sts	0x00F1, r30
 2c0:	e9 30       	cpi	r30, 0x09	; 9
 2c2:	08 f4       	brcc	.+2      	; 0x2c6 <__stack+0x67>
 2c4:	a0 cf       	rjmp	.-192    	; 0x206 <main+0x74>
 2c6:	e7 c2       	rjmp	.+1486   	; 0x896 <__FUSE_REGION_LENGTH__+0x496>
		}
		if (mode == 1)
		{
			for (j=0;j<8;j++)
			{
				write5Bytes(line_pattern2[j],line_pattern2[j]>>8,line_pattern2[j]>>16,line_pattern2[j]>>24,line_pattern2[j]>>32);
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	8c 0f       	add	r24, r28
 2dc:	9d 1f       	adc	r25, r29
 2de:	e8 0f       	add	r30, r24
 2e0:	f9 1f       	adc	r31, r25
 2e2:	a0 81       	ld	r26, Z
 2e4:	b1 80       	ldd	r11, Z+1	; 0x01
 2e6:	c2 80       	ldd	r12, Z+2	; 0x02
 2e8:	d3 80       	ldd	r13, Z+3	; 0x03
 2ea:	e4 80       	ldd	r14, Z+4	; 0x04
 2ec:	f5 80       	ldd	r15, Z+5	; 0x05
 2ee:	b6 81       	ldd	r27, Z+6	; 0x06
 2f0:	e7 81       	ldd	r30, Z+7	; 0x07
 2f2:	2a 2f       	mov	r18, r26
 2f4:	3b 2d       	mov	r19, r11
 2f6:	4c 2d       	mov	r20, r12
 2f8:	5d 2d       	mov	r21, r13
 2fa:	6e 2d       	mov	r22, r14
 2fc:	7f 2d       	mov	r23, r15
 2fe:	8b 2f       	mov	r24, r27
 300:	9e 2f       	mov	r25, r30
 302:	00 e2       	ldi	r16, 0x20	; 32
 304:	f0 d2       	rcall	.+1504   	; 0x8e6 <__lshrdi3>
 306:	92 2e       	mov	r9, r18
 308:	2a 2f       	mov	r18, r26
 30a:	3b 2d       	mov	r19, r11
 30c:	4c 2d       	mov	r20, r12
 30e:	5d 2d       	mov	r21, r13
 310:	6e 2d       	mov	r22, r14
 312:	7f 2d       	mov	r23, r15
 314:	8b 2f       	mov	r24, r27
 316:	9e 2f       	mov	r25, r30
 318:	08 e1       	ldi	r16, 0x18	; 24
 31a:	e5 d2       	rcall	.+1482   	; 0x8e6 <__lshrdi3>
 31c:	a2 2e       	mov	r10, r18
 31e:	2a 2f       	mov	r18, r26
 320:	3b 2d       	mov	r19, r11
 322:	4c 2d       	mov	r20, r12
 324:	5d 2d       	mov	r21, r13
 326:	6e 2d       	mov	r22, r14
 328:	7f 2d       	mov	r23, r15
 32a:	8b 2f       	mov	r24, r27
 32c:	9e 2f       	mov	r25, r30
 32e:	00 e1       	ldi	r16, 0x10	; 16
 330:	da d2       	rcall	.+1460   	; 0x8e6 <__lshrdi3>
 332:	f2 2f       	mov	r31, r18
 334:	2a 2f       	mov	r18, r26
 336:	3b 2d       	mov	r19, r11
 338:	4c 2d       	mov	r20, r12
 33a:	5d 2d       	mov	r21, r13
 33c:	6e 2d       	mov	r22, r14
 33e:	7f 2d       	mov	r23, r15
 340:	8b 2f       	mov	r24, r27
 342:	9e 2f       	mov	r25, r30
 344:	08 e0       	ldi	r16, 0x08	; 8
 346:	cf d2       	rcall	.+1438   	; 0x8e6 <__lshrdi3>
 348:	62 2f       	mov	r22, r18
 34a:	09 2d       	mov	r16, r9
 34c:	2a 2d       	mov	r18, r10
 34e:	4f 2f       	mov	r20, r31
 350:	8a 2f       	mov	r24, r26
 352:	9e de       	rcall	.-708    	; 0x90 <_Z11write5Byteshhhhh>
 354:	83 ed       	ldi	r24, 0xD3	; 211
 356:	90 e3       	ldi	r25, 0x30	; 48
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <__stack+0xf9>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <__stack+0xff>
 35e:	00 00       	nop
 360:	83 ed       	ldi	r24, 0xD3	; 211
 362:	90 e3       	ldi	r25, 0x30	; 48
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <__stack+0x105>
 368:	00 c0       	rjmp	.+0      	; 0x36a <__stack+0x10b>
 36a:	00 00       	nop
 36c:	83 ed       	ldi	r24, 0xD3	; 211
 36e:	90 e3       	ldi	r25, 0x30	; 48
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <__stack+0x111>
 374:	00 c0       	rjmp	.+0      	; 0x376 <__stack+0x117>
 376:	00 00       	nop
				Wait();				
			}
		}
		if (mode == 1)
		{
			for (j=0;j<8;j++)
 378:	e0 91 f1 00 	lds	r30, 0x00F1
 37c:	ef 5f       	subi	r30, 0xFF	; 255
 37e:	e0 93 f1 00 	sts	0x00F1, r30
 382:	e8 30       	cpi	r30, 0x08	; 8
 384:	08 f4       	brcc	.+2      	; 0x388 <__stack+0x129>
 386:	a0 cf       	rjmp	.-192    	; 0x2c8 <__stack+0x69>
				Wait();
				Wait();
				Wait();
			}
			
			for (j=8;j>0;j--)
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	80 93 f1 00 	sts	0x00F1, r24
 38e:	e8 e0       	ldi	r30, 0x08	; 8
			{
				if (mode == 1) //Check for exit condition
 390:	80 91 f2 00 	lds	r24, 0x00F2
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	09 f0       	breq	.+2      	; 0x39a <__stack+0x13b>
 398:	59 c0       	rjmp	.+178    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
				{
					write5Bytes(line_pattern2[j-1],line_pattern2[j-1]>>8,line_pattern2[j-1]>>16,line_pattern2[j-1]>>24,line_pattern2[j-1]>>32);
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	8c 0f       	add	r24, r28
 3b0:	9d 1f       	adc	r25, r29
 3b2:	e8 0f       	add	r30, r24
 3b4:	f9 1f       	adc	r31, r25
 3b6:	a0 81       	ld	r26, Z
 3b8:	b1 80       	ldd	r11, Z+1	; 0x01
 3ba:	c2 80       	ldd	r12, Z+2	; 0x02
 3bc:	d3 80       	ldd	r13, Z+3	; 0x03
 3be:	e4 80       	ldd	r14, Z+4	; 0x04
 3c0:	f5 80       	ldd	r15, Z+5	; 0x05
 3c2:	b6 81       	ldd	r27, Z+6	; 0x06
 3c4:	e7 81       	ldd	r30, Z+7	; 0x07
 3c6:	2a 2f       	mov	r18, r26
 3c8:	3b 2d       	mov	r19, r11
 3ca:	4c 2d       	mov	r20, r12
 3cc:	5d 2d       	mov	r21, r13
 3ce:	6e 2d       	mov	r22, r14
 3d0:	7f 2d       	mov	r23, r15
 3d2:	8b 2f       	mov	r24, r27
 3d4:	9e 2f       	mov	r25, r30
 3d6:	00 e2       	ldi	r16, 0x20	; 32
 3d8:	86 d2       	rcall	.+1292   	; 0x8e6 <__lshrdi3>
 3da:	92 2e       	mov	r9, r18
 3dc:	2a 2f       	mov	r18, r26
 3de:	3b 2d       	mov	r19, r11
 3e0:	4c 2d       	mov	r20, r12
 3e2:	5d 2d       	mov	r21, r13
 3e4:	6e 2d       	mov	r22, r14
 3e6:	7f 2d       	mov	r23, r15
 3e8:	8b 2f       	mov	r24, r27
 3ea:	9e 2f       	mov	r25, r30
 3ec:	08 e1       	ldi	r16, 0x18	; 24
 3ee:	7b d2       	rcall	.+1270   	; 0x8e6 <__lshrdi3>
 3f0:	a2 2e       	mov	r10, r18
 3f2:	2a 2f       	mov	r18, r26
 3f4:	3b 2d       	mov	r19, r11
 3f6:	4c 2d       	mov	r20, r12
 3f8:	5d 2d       	mov	r21, r13
 3fa:	6e 2d       	mov	r22, r14
 3fc:	7f 2d       	mov	r23, r15
 3fe:	8b 2f       	mov	r24, r27
 400:	9e 2f       	mov	r25, r30
 402:	00 e1       	ldi	r16, 0x10	; 16
 404:	70 d2       	rcall	.+1248   	; 0x8e6 <__lshrdi3>
 406:	f2 2f       	mov	r31, r18
 408:	2a 2f       	mov	r18, r26
 40a:	3b 2d       	mov	r19, r11
 40c:	4c 2d       	mov	r20, r12
 40e:	5d 2d       	mov	r21, r13
 410:	6e 2d       	mov	r22, r14
 412:	7f 2d       	mov	r23, r15
 414:	8b 2f       	mov	r24, r27
 416:	9e 2f       	mov	r25, r30
 418:	08 e0       	ldi	r16, 0x08	; 8
 41a:	65 d2       	rcall	.+1226   	; 0x8e6 <__lshrdi3>
 41c:	62 2f       	mov	r22, r18
 41e:	09 2d       	mov	r16, r9
 420:	2a 2d       	mov	r18, r10
 422:	4f 2f       	mov	r20, r31
 424:	8a 2f       	mov	r24, r26
 426:	34 de       	rcall	.-920    	; 0x90 <_Z11write5Byteshhhhh>
 428:	83 ed       	ldi	r24, 0xD3	; 211
 42a:	90 e3       	ldi	r25, 0x30	; 48
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	83 ed       	ldi	r24, 0xD3	; 211
 436:	90 e3       	ldi	r25, 0x30	; 48
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	83 ed       	ldi	r24, 0xD3	; 211
 442:	90 e3       	ldi	r25, 0x30	; 48
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
				Wait();
				Wait();
				Wait();
			}
			
			for (j=8;j>0;j--)
 44c:	e0 91 f1 00 	lds	r30, 0x00F1
 450:	e1 50       	subi	r30, 0x01	; 1
 452:	e0 93 f1 00 	sts	0x00F1, r30
 456:	e1 11       	cpse	r30, r1
 458:	9b cf       	rjmp	.-202    	; 0x390 <__stack+0x131>
					Wait();
				}
			}
					
		}
		if (mode == 2)
 45a:	80 91 f2 00 	lds	r24, 0x00F2
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	09 f0       	breq	.+2      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 462:	22 c2       	rjmp	.+1092   	; 0x8a8 <__FUSE_REGION_LENGTH__+0x4a8>
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 464:	10 92 f1 00 	sts	0x00F1, r1
 468:	11 e0       	ldi	r17, 0x01	; 1
 46a:	81 2c       	mov	r8, r1
 46c:	91 2c       	mov	r9, r1
 46e:	a1 2c       	mov	r10, r1
 470:	d1 2c       	mov	r13, r1
 472:	e1 2c       	mov	r14, r1
 474:	b1 2c       	mov	r11, r1
 476:	c1 2c       	mov	r12, r1
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 478:	21 2f       	mov	r18, r17
 47a:	38 2d       	mov	r19, r8
 47c:	49 2d       	mov	r20, r9
 47e:	5a 2d       	mov	r21, r10
 480:	6d 2d       	mov	r22, r13
 482:	7e 2d       	mov	r23, r14
 484:	8b 2d       	mov	r24, r11
 486:	9c 2d       	mov	r25, r12
 488:	00 e2       	ldi	r16, 0x20	; 32
 48a:	2d d2       	rcall	.+1114   	; 0x8e6 <__lshrdi3>
 48c:	a2 2f       	mov	r26, r18
 48e:	21 2f       	mov	r18, r17
 490:	38 2d       	mov	r19, r8
 492:	49 2d       	mov	r20, r9
 494:	5a 2d       	mov	r21, r10
 496:	6d 2d       	mov	r22, r13
 498:	7e 2d       	mov	r23, r14
 49a:	8b 2d       	mov	r24, r11
 49c:	9c 2d       	mov	r25, r12
 49e:	08 e1       	ldi	r16, 0x18	; 24
 4a0:	22 d2       	rcall	.+1092   	; 0x8e6 <__lshrdi3>
 4a2:	f2 2f       	mov	r31, r18
 4a4:	21 2f       	mov	r18, r17
 4a6:	38 2d       	mov	r19, r8
 4a8:	49 2d       	mov	r20, r9
 4aa:	5a 2d       	mov	r21, r10
 4ac:	6d 2d       	mov	r22, r13
 4ae:	7e 2d       	mov	r23, r14
 4b0:	8b 2d       	mov	r24, r11
 4b2:	9c 2d       	mov	r25, r12
 4b4:	00 e1       	ldi	r16, 0x10	; 16
 4b6:	17 d2       	rcall	.+1070   	; 0x8e6 <__lshrdi3>
 4b8:	e2 2f       	mov	r30, r18
 4ba:	21 2f       	mov	r18, r17
 4bc:	38 2d       	mov	r19, r8
 4be:	49 2d       	mov	r20, r9
 4c0:	5a 2d       	mov	r21, r10
 4c2:	6d 2d       	mov	r22, r13
 4c4:	7e 2d       	mov	r23, r14
 4c6:	8b 2d       	mov	r24, r11
 4c8:	9c 2d       	mov	r25, r12
 4ca:	08 e0       	ldi	r16, 0x08	; 8
 4cc:	0c d2       	rcall	.+1048   	; 0x8e6 <__lshrdi3>
 4ce:	62 2f       	mov	r22, r18
 4d0:	0a 2f       	mov	r16, r26
 4d2:	2f 2f       	mov	r18, r31
 4d4:	4e 2f       	mov	r20, r30
 4d6:	81 2f       	mov	r24, r17
 4d8:	db dd       	rcall	.-1098   	; 0x90 <_Z11write5Byteshhhhh>
				shiftedNum = shiftedNum<<1;				   
 4da:	21 2f       	mov	r18, r17
 4dc:	38 2d       	mov	r19, r8
 4de:	49 2d       	mov	r20, r9
 4e0:	5a 2d       	mov	r21, r10
 4e2:	6d 2d       	mov	r22, r13
 4e4:	7e 2d       	mov	r23, r14
 4e6:	8b 2d       	mov	r24, r11
 4e8:	9c 2d       	mov	r25, r12
 4ea:	01 e0       	ldi	r16, 0x01	; 1
 4ec:	e1 d1       	rcall	.+962    	; 0x8b0 <__ashldi3>
 4ee:	12 2f       	mov	r17, r18
 4f0:	83 2e       	mov	r8, r19
 4f2:	94 2e       	mov	r9, r20
 4f4:	a5 2e       	mov	r10, r21
 4f6:	d6 2e       	mov	r13, r22
 4f8:	e7 2e       	mov	r14, r23
 4fa:	b8 2e       	mov	r11, r24
 4fc:	c9 2e       	mov	r12, r25
 4fe:	83 ed       	ldi	r24, 0xD3	; 211
 500:	90 e3       	ldi	r25, 0x30	; 48
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 508:	00 00       	nop
					
		}
		if (mode == 2)
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 50a:	80 91 f1 00 	lds	r24, 0x00F1
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 93 f1 00 	sts	0x00F1, r24
 514:	86 32       	cpi	r24, 0x26	; 38
 516:	08 f4       	brcc	.+2      	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
 518:	af cf       	rjmp	.-162    	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;				   
				Wait();										
			}
		}
		if (mode == 3)
 51a:	80 91 f2 00 	lds	r24, 0x00F2
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	09 f0       	breq	.+2      	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
 522:	b5 c0       	rjmp	.+362    	; 0x68e <__FUSE_REGION_LENGTH__+0x28e>
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 524:	10 92 f1 00 	sts	0x00F1, r1
					
		}
		if (mode == 2)
		{
			uint64_t shiftedNum =0x01;
			for (j=0;j<38;j++)
 528:	f1 2c       	mov	r15, r1
 52a:	e1 2c       	mov	r14, r1
 52c:	d1 2c       	mov	r13, r1
 52e:	c1 2c       	mov	r12, r1
 530:	b1 2c       	mov	r11, r1
 532:	a1 2c       	mov	r10, r1
 534:	91 2c       	mov	r9, r1
 536:	81 2c       	mov	r8, r1
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 538:	2f 2d       	mov	r18, r15
 53a:	3e 2d       	mov	r19, r14
 53c:	4d 2d       	mov	r20, r13
 53e:	5c 2d       	mov	r21, r12
 540:	6b 2d       	mov	r22, r11
 542:	7a 2d       	mov	r23, r10
 544:	89 2d       	mov	r24, r9
 546:	98 2d       	mov	r25, r8
 548:	00 e2       	ldi	r16, 0x20	; 32
 54a:	cd d1       	rcall	.+922    	; 0x8e6 <__lshrdi3>
 54c:	a2 2f       	mov	r26, r18
 54e:	2f 2d       	mov	r18, r15
 550:	3e 2d       	mov	r19, r14
 552:	4d 2d       	mov	r20, r13
 554:	5c 2d       	mov	r21, r12
 556:	6b 2d       	mov	r22, r11
 558:	7a 2d       	mov	r23, r10
 55a:	89 2d       	mov	r24, r9
 55c:	98 2d       	mov	r25, r8
 55e:	08 e1       	ldi	r16, 0x18	; 24
 560:	c2 d1       	rcall	.+900    	; 0x8e6 <__lshrdi3>
 562:	f2 2f       	mov	r31, r18
 564:	2f 2d       	mov	r18, r15
 566:	3e 2d       	mov	r19, r14
 568:	4d 2d       	mov	r20, r13
 56a:	5c 2d       	mov	r21, r12
 56c:	6b 2d       	mov	r22, r11
 56e:	7a 2d       	mov	r23, r10
 570:	89 2d       	mov	r24, r9
 572:	98 2d       	mov	r25, r8
 574:	00 e1       	ldi	r16, 0x10	; 16
 576:	b7 d1       	rcall	.+878    	; 0x8e6 <__lshrdi3>
 578:	e2 2f       	mov	r30, r18
 57a:	2f 2d       	mov	r18, r15
 57c:	3e 2d       	mov	r19, r14
 57e:	4d 2d       	mov	r20, r13
 580:	5c 2d       	mov	r21, r12
 582:	6b 2d       	mov	r22, r11
 584:	7a 2d       	mov	r23, r10
 586:	89 2d       	mov	r24, r9
 588:	98 2d       	mov	r25, r8
 58a:	08 e0       	ldi	r16, 0x08	; 8
 58c:	ac d1       	rcall	.+856    	; 0x8e6 <__lshrdi3>
 58e:	62 2f       	mov	r22, r18
 590:	0a 2f       	mov	r16, r26
 592:	2f 2f       	mov	r18, r31
 594:	4e 2f       	mov	r20, r30
 596:	8f 2d       	mov	r24, r15
 598:	7b dd       	rcall	.-1290   	; 0x90 <_Z11write5Byteshhhhh>
				shiftedNum = shiftedNum<<1;
 59a:	2f 2d       	mov	r18, r15
 59c:	3e 2d       	mov	r19, r14
 59e:	4d 2d       	mov	r20, r13
 5a0:	5c 2d       	mov	r21, r12
 5a2:	6b 2d       	mov	r22, r11
 5a4:	7a 2d       	mov	r23, r10
 5a6:	89 2d       	mov	r24, r9
 5a8:	98 2d       	mov	r25, r8
 5aa:	01 e0       	ldi	r16, 0x01	; 1
 5ac:	81 d1       	rcall	.+770    	; 0x8b0 <__ashldi3>
				shiftedNum = shiftedNum + 1;				   
 5ae:	a1 e0       	ldi	r26, 0x01	; 1
 5b0:	b6 d1       	rcall	.+876    	; 0x91e <__adddi3_s8>
 5b2:	f2 2e       	mov	r15, r18
 5b4:	e3 2e       	mov	r14, r19
 5b6:	d4 2e       	mov	r13, r20
 5b8:	c5 2e       	mov	r12, r21
 5ba:	b6 2e       	mov	r11, r22
 5bc:	a7 2e       	mov	r10, r23
 5be:	98 2e       	mov	r9, r24
 5c0:	89 2e       	mov	r8, r25
 5c2:	83 ed       	ldi	r24, 0xD3	; 211
 5c4:	90 e3       	ldi	r25, 0x30	; 48
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <__FUSE_REGION_LENGTH__+0x1cc>
 5cc:	00 00       	nop
			}
		}
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 5ce:	80 91 f1 00 	lds	r24, 0x00F1
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 f1 00 	sts	0x00F1, r24
 5d8:	87 32       	cpi	r24, 0x27	; 39
 5da:	08 f4       	brcc	.+2      	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
 5dc:	ad cf       	rjmp	.-166    	; 0x538 <__FUSE_REGION_LENGTH__+0x138>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;
				shiftedNum = shiftedNum + 1;				   
				Wait();										
			}
			if (mode == 3)//check for exit condition
 5de:	80 91 f2 00 	lds	r24, 0x00F2
 5e2:	83 30       	cpi	r24, 0x03	; 3
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__FUSE_REGION_LENGTH__+0x1e8>
 5e6:	53 c0       	rjmp	.+166    	; 0x68e <__FUSE_REGION_LENGTH__+0x28e>
			{
				for (j=0;j<39;j++)
 5e8:	10 92 f1 00 	sts	0x00F1, r1
				{
					write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 5ec:	2f 2d       	mov	r18, r15
 5ee:	3e 2d       	mov	r19, r14
 5f0:	4d 2d       	mov	r20, r13
 5f2:	5c 2d       	mov	r21, r12
 5f4:	6b 2d       	mov	r22, r11
 5f6:	7a 2d       	mov	r23, r10
 5f8:	89 2d       	mov	r24, r9
 5fa:	98 2d       	mov	r25, r8
 5fc:	00 e2       	ldi	r16, 0x20	; 32
 5fe:	73 d1       	rcall	.+742    	; 0x8e6 <__lshrdi3>
 600:	a2 2f       	mov	r26, r18
 602:	2f 2d       	mov	r18, r15
 604:	3e 2d       	mov	r19, r14
 606:	4d 2d       	mov	r20, r13
 608:	5c 2d       	mov	r21, r12
 60a:	6b 2d       	mov	r22, r11
 60c:	7a 2d       	mov	r23, r10
 60e:	89 2d       	mov	r24, r9
 610:	98 2d       	mov	r25, r8
 612:	08 e1       	ldi	r16, 0x18	; 24
 614:	68 d1       	rcall	.+720    	; 0x8e6 <__lshrdi3>
 616:	f2 2f       	mov	r31, r18
 618:	2f 2d       	mov	r18, r15
 61a:	3e 2d       	mov	r19, r14
 61c:	4d 2d       	mov	r20, r13
 61e:	5c 2d       	mov	r21, r12
 620:	6b 2d       	mov	r22, r11
 622:	7a 2d       	mov	r23, r10
 624:	89 2d       	mov	r24, r9
 626:	98 2d       	mov	r25, r8
 628:	00 e1       	ldi	r16, 0x10	; 16
 62a:	5d d1       	rcall	.+698    	; 0x8e6 <__lshrdi3>
 62c:	e2 2f       	mov	r30, r18
 62e:	2f 2d       	mov	r18, r15
 630:	3e 2d       	mov	r19, r14
 632:	4d 2d       	mov	r20, r13
 634:	5c 2d       	mov	r21, r12
 636:	6b 2d       	mov	r22, r11
 638:	7a 2d       	mov	r23, r10
 63a:	89 2d       	mov	r24, r9
 63c:	98 2d       	mov	r25, r8
 63e:	08 e0       	ldi	r16, 0x08	; 8
 640:	52 d1       	rcall	.+676    	; 0x8e6 <__lshrdi3>
 642:	62 2f       	mov	r22, r18
 644:	0a 2f       	mov	r16, r26
 646:	2f 2f       	mov	r18, r31
 648:	4e 2f       	mov	r20, r30
 64a:	8f 2d       	mov	r24, r15
 64c:	21 dd       	rcall	.-1470   	; 0x90 <_Z11write5Byteshhhhh>
					shiftedNum = shiftedNum<<1;
 64e:	2f 2d       	mov	r18, r15
 650:	3e 2d       	mov	r19, r14
 652:	4d 2d       	mov	r20, r13
 654:	5c 2d       	mov	r21, r12
 656:	6b 2d       	mov	r22, r11
 658:	7a 2d       	mov	r23, r10
 65a:	89 2d       	mov	r24, r9
 65c:	98 2d       	mov	r25, r8
 65e:	01 e0       	ldi	r16, 0x01	; 1
 660:	27 d1       	rcall	.+590    	; 0x8b0 <__ashldi3>
 662:	f2 2e       	mov	r15, r18
 664:	e3 2e       	mov	r14, r19
 666:	d4 2e       	mov	r13, r20
 668:	c5 2e       	mov	r12, r21
 66a:	b6 2e       	mov	r11, r22
 66c:	a7 2e       	mov	r10, r23
 66e:	98 2e       	mov	r9, r24
 670:	89 2e       	mov	r8, r25
 672:	83 ed       	ldi	r24, 0xD3	; 211
 674:	90 e3       	ldi	r25, 0x30	; 48
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <__FUSE_REGION_LENGTH__+0x276>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <__FUSE_REGION_LENGTH__+0x27c>
 67c:	00 00       	nop
				shiftedNum = shiftedNum + 1;				   
				Wait();										
			}
			if (mode == 3)//check for exit condition
			{
				for (j=0;j<39;j++)
 67e:	80 91 f1 00 	lds	r24, 0x00F1
 682:	8f 5f       	subi	r24, 0xFF	; 255
 684:	80 93 f1 00 	sts	0x00F1, r24
 688:	87 32       	cpi	r24, 0x27	; 39
 68a:	08 f4       	brcc	.+2      	; 0x68e <__FUSE_REGION_LENGTH__+0x28e>
 68c:	af cf       	rjmp	.-162    	; 0x5ec <__FUSE_REGION_LENGTH__+0x1ec>
					shiftedNum = shiftedNum<<1;
					Wait();
				}
			}			
		}
		if (mode == 4)
 68e:	80 91 f2 00 	lds	r24, 0x00F2
 692:	84 30       	cpi	r24, 0x04	; 4
 694:	09 f0       	breq	.+2      	; 0x698 <__FUSE_REGION_LENGTH__+0x298>
 696:	77 c0       	rjmp	.+238    	; 0x786 <__FUSE_REGION_LENGTH__+0x386>
 698:	e7 2c       	mov	r14, r7
 69a:	a1 2c       	mov	r10, r1
 69c:	b1 2c       	mov	r11, r1
 69e:	c1 2c       	mov	r12, r1
 6a0:	10 e0       	ldi	r17, 0x00	; 0
 6a2:	d1 2c       	mov	r13, r1
 6a4:	81 2c       	mov	r8, r1
 6a6:	91 2c       	mov	r9, r1
		{
			uint64_t shiftedNum =0x0F;
			while (mode == 4)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 6a8:	2e 2d       	mov	r18, r14
 6aa:	3a 2d       	mov	r19, r10
 6ac:	4b 2d       	mov	r20, r11
 6ae:	5c 2d       	mov	r21, r12
 6b0:	61 2f       	mov	r22, r17
 6b2:	7d 2d       	mov	r23, r13
 6b4:	88 2d       	mov	r24, r8
 6b6:	99 2d       	mov	r25, r9
 6b8:	00 e2       	ldi	r16, 0x20	; 32
 6ba:	15 d1       	rcall	.+554    	; 0x8e6 <__lshrdi3>
 6bc:	a2 2f       	mov	r26, r18
 6be:	2e 2d       	mov	r18, r14
 6c0:	3a 2d       	mov	r19, r10
 6c2:	4b 2d       	mov	r20, r11
 6c4:	5c 2d       	mov	r21, r12
 6c6:	61 2f       	mov	r22, r17
 6c8:	7d 2d       	mov	r23, r13
 6ca:	88 2d       	mov	r24, r8
 6cc:	99 2d       	mov	r25, r9
 6ce:	08 e1       	ldi	r16, 0x18	; 24
 6d0:	0a d1       	rcall	.+532    	; 0x8e6 <__lshrdi3>
 6d2:	f2 2f       	mov	r31, r18
 6d4:	2e 2d       	mov	r18, r14
 6d6:	3a 2d       	mov	r19, r10
 6d8:	4b 2d       	mov	r20, r11
 6da:	5c 2d       	mov	r21, r12
 6dc:	61 2f       	mov	r22, r17
 6de:	7d 2d       	mov	r23, r13
 6e0:	88 2d       	mov	r24, r8
 6e2:	99 2d       	mov	r25, r9
 6e4:	00 e1       	ldi	r16, 0x10	; 16
 6e6:	ff d0       	rcall	.+510    	; 0x8e6 <__lshrdi3>
 6e8:	e2 2f       	mov	r30, r18
 6ea:	2e 2d       	mov	r18, r14
 6ec:	3a 2d       	mov	r19, r10
 6ee:	4b 2d       	mov	r20, r11
 6f0:	5c 2d       	mov	r21, r12
 6f2:	61 2f       	mov	r22, r17
 6f4:	7d 2d       	mov	r23, r13
 6f6:	88 2d       	mov	r24, r8
 6f8:	99 2d       	mov	r25, r9
 6fa:	08 e0       	ldi	r16, 0x08	; 8
 6fc:	f4 d0       	rcall	.+488    	; 0x8e6 <__lshrdi3>
 6fe:	62 2f       	mov	r22, r18
 700:	0a 2f       	mov	r16, r26
 702:	2f 2f       	mov	r18, r31
 704:	4e 2f       	mov	r20, r30
 706:	8e 2d       	mov	r24, r14
 708:	c3 dc       	rcall	.-1658   	; 0x90 <_Z11write5Byteshhhhh>
				if ((shiftedNum & 0x002000000000) == 0x002000000000) //Bit at end
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	61 2f       	mov	r22, r17
 714:	60 72       	andi	r22, 0x20	; 32
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	0b d1       	rcall	.+534    	; 0x936 <__cmpdi2_s8>
 720:	a9 f0       	breq	.+42     	; 0x74c <__FUSE_REGION_LENGTH__+0x34c>
				{
					shiftedNum = shiftedNum<<1;
 722:	2e 2d       	mov	r18, r14
 724:	3a 2d       	mov	r19, r10
 726:	4b 2d       	mov	r20, r11
 728:	5c 2d       	mov	r21, r12
 72a:	61 2f       	mov	r22, r17
 72c:	7d 2d       	mov	r23, r13
 72e:	88 2d       	mov	r24, r8
 730:	99 2d       	mov	r25, r9
 732:	01 e0       	ldi	r16, 0x01	; 1
 734:	bd d0       	rcall	.+378    	; 0x8b0 <__ashldi3>
					shiftedNum = shiftedNum + 1;
 736:	a1 e0       	ldi	r26, 0x01	; 1
 738:	f2 d0       	rcall	.+484    	; 0x91e <__adddi3_s8>
 73a:	e2 2e       	mov	r14, r18
 73c:	a3 2e       	mov	r10, r19
 73e:	b4 2e       	mov	r11, r20
 740:	c5 2e       	mov	r12, r21
 742:	16 2f       	mov	r17, r22
 744:	d7 2e       	mov	r13, r23
 746:	88 2e       	mov	r8, r24
 748:	99 2e       	mov	r9, r25
 74a:	12 c0       	rjmp	.+36     	; 0x770 <__FUSE_REGION_LENGTH__+0x370>
				} 
				else
				{
					shiftedNum = shiftedNum<<1;
 74c:	2e 2d       	mov	r18, r14
 74e:	3a 2d       	mov	r19, r10
 750:	4b 2d       	mov	r20, r11
 752:	5c 2d       	mov	r21, r12
 754:	61 2f       	mov	r22, r17
 756:	7d 2d       	mov	r23, r13
 758:	88 2d       	mov	r24, r8
 75a:	99 2d       	mov	r25, r9
 75c:	01 e0       	ldi	r16, 0x01	; 1
 75e:	a8 d0       	rcall	.+336    	; 0x8b0 <__ashldi3>
 760:	e2 2e       	mov	r14, r18
 762:	a3 2e       	mov	r10, r19
 764:	b4 2e       	mov	r11, r20
 766:	c5 2e       	mov	r12, r21
 768:	16 2f       	mov	r17, r22
 76a:	d7 2e       	mov	r13, r23
 76c:	88 2e       	mov	r8, r24
 76e:	99 2e       	mov	r9, r25
 770:	83 ed       	ldi	r24, 0xD3	; 211
 772:	90 e3       	ldi	r25, 0x30	; 48
 774:	01 97       	sbiw	r24, 0x01	; 1
 776:	f1 f7       	brne	.-4      	; 0x774 <__FUSE_REGION_LENGTH__+0x374>
 778:	00 c0       	rjmp	.+0      	; 0x77a <__FUSE_REGION_LENGTH__+0x37a>
 77a:	00 00       	nop
			}			
		}
		if (mode == 4)
		{
			uint64_t shiftedNum =0x0F;
			while (mode == 4)
 77c:	80 91 f2 00 	lds	r24, 0x00F2
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	09 f4       	brne	.+2      	; 0x786 <__FUSE_REGION_LENGTH__+0x386>
 784:	91 cf       	rjmp	.-222    	; 0x6a8 <__FUSE_REGION_LENGTH__+0x2a8>
				}
				
				Wait();
			}
		}
		if (mode == 5)
 786:	80 91 f2 00 	lds	r24, 0x00F2
 78a:	85 30       	cpi	r24, 0x05	; 5
 78c:	61 f4       	brne	.+24     	; 0x7a6 <__FUSE_REGION_LENGTH__+0x3a6>
		{
			write5Bytes(0xFF,0xFF,0xFF,0xFF,0xFF);
 78e:	0f ef       	ldi	r16, 0xFF	; 255
 790:	2f ef       	ldi	r18, 0xFF	; 255
 792:	4f ef       	ldi	r20, 0xFF	; 255
 794:	6f ef       	ldi	r22, 0xFF	; 255
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	7b dc       	rcall	.-1802   	; 0x90 <_Z11write5Byteshhhhh>
 79a:	83 ed       	ldi	r24, 0xD3	; 211
 79c:	90 e3       	ldi	r25, 0x30	; 48
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <__FUSE_REGION_LENGTH__+0x39e>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <__FUSE_REGION_LENGTH__+0x3a4>
 7a4:	00 00       	nop
			Wait();
		}
		if (mode == 6)
 7a6:	80 91 f2 00 	lds	r24, 0x00F2
 7aa:	86 30       	cpi	r24, 0x06	; 6
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <__FUSE_REGION_LENGTH__+0x3b0>
 7ae:	25 cd       	rjmp	.-1462   	; 0x1fa <main+0x68>
		{
			uint64_t shiftedNum =0x00;
			for (shiftedNum=0;(shiftedNum<274877906944 && mode == 6);shiftedNum++)
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 7b0:	00 e0       	ldi	r16, 0x00	; 0
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	6a dc       	rcall	.-1836   	; 0x90 <_Z11write5Byteshhhhh>
 7bc:	89 ef       	ldi	r24, 0xF9	; 249
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__FUSE_REGION_LENGTH__+0x3c0>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__FUSE_REGION_LENGTH__+0x3c6>
 7c6:	00 00       	nop
			Wait();
		}
		if (mode == 6)
		{
			uint64_t shiftedNum =0x00;
			for (shiftedNum=0;(shiftedNum<274877906944 && mode == 6);shiftedNum++)
 7c8:	ff 24       	eor	r15, r15
 7ca:	f3 94       	inc	r15
 7cc:	81 2c       	mov	r8, r1
 7ce:	91 2c       	mov	r9, r1
 7d0:	a1 2c       	mov	r10, r1
 7d2:	b1 2c       	mov	r11, r1
 7d4:	c1 2c       	mov	r12, r1
 7d6:	d1 2c       	mov	r13, r1
 7d8:	e1 2c       	mov	r14, r1
 7da:	53 c0       	rjmp	.+166    	; 0x882 <__FUSE_REGION_LENGTH__+0x482>
			{
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
 7dc:	2f 2d       	mov	r18, r15
 7de:	38 2d       	mov	r19, r8
 7e0:	49 2d       	mov	r20, r9
 7e2:	5a 2d       	mov	r21, r10
 7e4:	6b 2d       	mov	r22, r11
 7e6:	7c 2d       	mov	r23, r12
 7e8:	8d 2d       	mov	r24, r13
 7ea:	9e 2d       	mov	r25, r14
 7ec:	00 e2       	ldi	r16, 0x20	; 32
 7ee:	7b d0       	rcall	.+246    	; 0x8e6 <__lshrdi3>
 7f0:	a2 2f       	mov	r26, r18
 7f2:	2f 2d       	mov	r18, r15
 7f4:	38 2d       	mov	r19, r8
 7f6:	49 2d       	mov	r20, r9
 7f8:	5a 2d       	mov	r21, r10
 7fa:	6b 2d       	mov	r22, r11
 7fc:	7c 2d       	mov	r23, r12
 7fe:	8d 2d       	mov	r24, r13
 800:	9e 2d       	mov	r25, r14
 802:	08 e1       	ldi	r16, 0x18	; 24
 804:	70 d0       	rcall	.+224    	; 0x8e6 <__lshrdi3>
 806:	f2 2f       	mov	r31, r18
 808:	2f 2d       	mov	r18, r15
 80a:	38 2d       	mov	r19, r8
 80c:	49 2d       	mov	r20, r9
 80e:	5a 2d       	mov	r21, r10
 810:	6b 2d       	mov	r22, r11
 812:	7c 2d       	mov	r23, r12
 814:	8d 2d       	mov	r24, r13
 816:	9e 2d       	mov	r25, r14
 818:	00 e1       	ldi	r16, 0x10	; 16
 81a:	65 d0       	rcall	.+202    	; 0x8e6 <__lshrdi3>
 81c:	e2 2f       	mov	r30, r18
 81e:	2f 2d       	mov	r18, r15
 820:	38 2d       	mov	r19, r8
 822:	49 2d       	mov	r20, r9
 824:	5a 2d       	mov	r21, r10
 826:	6b 2d       	mov	r22, r11
 828:	7c 2d       	mov	r23, r12
 82a:	8d 2d       	mov	r24, r13
 82c:	9e 2d       	mov	r25, r14
 82e:	08 e0       	ldi	r16, 0x08	; 8
 830:	5a d0       	rcall	.+180    	; 0x8e6 <__lshrdi3>
 832:	62 2f       	mov	r22, r18
 834:	0a 2f       	mov	r16, r26
 836:	2f 2f       	mov	r18, r31
 838:	4e 2f       	mov	r20, r30
 83a:	8f 2d       	mov	r24, r15
 83c:	29 dc       	rcall	.-1966   	; 0x90 <_Z11write5Byteshhhhh>
 83e:	89 ef       	ldi	r24, 0xF9	; 249
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <__FUSE_REGION_LENGTH__+0x442>
 846:	00 c0       	rjmp	.+0      	; 0x848 <__FUSE_REGION_LENGTH__+0x448>
 848:	00 00       	nop
			Wait();
		}
		if (mode == 6)
		{
			uint64_t shiftedNum =0x00;
			for (shiftedNum=0;(shiftedNum<274877906944 && mode == 6);shiftedNum++)
 84a:	2f 2d       	mov	r18, r15
 84c:	38 2d       	mov	r19, r8
 84e:	49 2d       	mov	r20, r9
 850:	5a 2d       	mov	r21, r10
 852:	6b 2d       	mov	r22, r11
 854:	7c 2d       	mov	r23, r12
 856:	8d 2d       	mov	r24, r13
 858:	9e 2d       	mov	r25, r14
 85a:	a1 e0       	ldi	r26, 0x01	; 1
 85c:	60 d0       	rcall	.+192    	; 0x91e <__adddi3_s8>
 85e:	f2 2e       	mov	r15, r18
 860:	83 2e       	mov	r8, r19
 862:	94 2e       	mov	r9, r20
 864:	a5 2e       	mov	r10, r21
 866:	b6 2e       	mov	r11, r22
 868:	c7 2e       	mov	r12, r23
 86a:	d8 2e       	mov	r13, r24
 86c:	e9 2e       	mov	r14, r25
 86e:	21 15       	cp	r18, r1
 870:	31 05       	cpc	r19, r1
 872:	41 05       	cpc	r20, r1
 874:	51 05       	cpc	r21, r1
 876:	60 44       	sbci	r22, 0x40	; 64
 878:	71 05       	cpc	r23, r1
 87a:	81 05       	cpc	r24, r1
 87c:	91 05       	cpc	r25, r1
 87e:	09 f4       	brne	.+2      	; 0x882 <__FUSE_REGION_LENGTH__+0x482>
 880:	bc cc       	rjmp	.-1672   	; 0x1fa <main+0x68>
 882:	80 91 f2 00 	lds	r24, 0x00F2
 886:	86 30       	cpi	r24, 0x06	; 6
 888:	09 f4       	brne	.+2      	; 0x88c <__FUSE_REGION_LENGTH__+0x48c>
 88a:	a8 cf       	rjmp	.-176    	; 0x7dc <__FUSE_REGION_LENGTH__+0x3dc>
 88c:	b6 cc       	rjmp	.-1684   	; 0x1fa <main+0x68>
				Wait();				
			}
		}
		if (mode == 1)
		{
			for (j=0;j<8;j++)
 88e:	10 92 f1 00 	sts	0x00F1, r1
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	19 cd       	rjmp	.-1486   	; 0x2c8 <__stack+0x69>
				Wait();   	
				Wait();	 
				Wait();				
			}
		}
		if (mode == 1)
 896:	80 91 f2 00 	lds	r24, 0x00F2
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	09 f0       	breq	.+2      	; 0x8a0 <__FUSE_REGION_LENGTH__+0x4a0>
 89e:	dd cd       	rjmp	.-1094   	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <__FUSE_REGION_LENGTH__+0x48e>
			}
		}
		if (mode == 3)
		{
			uint64_t shiftedNum =0x00;
			for (j=0;j<39;j++)
 8a2:	10 92 f1 00 	sts	0x00F1, r1
 8a6:	40 ce       	rjmp	.-896    	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
				write5Bytes(shiftedNum,shiftedNum>>8,shiftedNum>>16,shiftedNum>>24,shiftedNum>>32);
				shiftedNum = shiftedNum<<1;				   
				Wait();										
			}
		}
		if (mode == 3)
 8a8:	83 30       	cpi	r24, 0x03	; 3
 8aa:	09 f0       	breq	.+2      	; 0x8ae <__FUSE_REGION_LENGTH__+0x4ae>
 8ac:	f0 ce       	rjmp	.-544    	; 0x68e <__FUSE_REGION_LENGTH__+0x28e>
 8ae:	f9 cf       	rjmp	.-14     	; 0x8a2 <__FUSE_REGION_LENGTH__+0x4a2>

000008b0 <__ashldi3>:
 8b0:	0f 93       	push	r16
 8b2:	08 30       	cpi	r16, 0x08	; 8
 8b4:	90 f0       	brcs	.+36     	; 0x8da <__ashldi3+0x2a>
 8b6:	98 2f       	mov	r25, r24
 8b8:	87 2f       	mov	r24, r23
 8ba:	76 2f       	mov	r23, r22
 8bc:	65 2f       	mov	r22, r21
 8be:	54 2f       	mov	r21, r20
 8c0:	43 2f       	mov	r20, r19
 8c2:	32 2f       	mov	r19, r18
 8c4:	22 27       	eor	r18, r18
 8c6:	08 50       	subi	r16, 0x08	; 8
 8c8:	f4 cf       	rjmp	.-24     	; 0x8b2 <__ashldi3+0x2>
 8ca:	22 0f       	add	r18, r18
 8cc:	33 1f       	adc	r19, r19
 8ce:	44 1f       	adc	r20, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	66 1f       	adc	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	0a 95       	dec	r16
 8dc:	b2 f7       	brpl	.-20     	; 0x8ca <__ashldi3+0x1a>
 8de:	0f 91       	pop	r16
 8e0:	08 95       	ret

000008e2 <__ashrdi3>:
 8e2:	97 fb       	bst	r25, 7
 8e4:	10 f8       	bld	r1, 0

000008e6 <__lshrdi3>:
 8e6:	16 94       	lsr	r1
 8e8:	00 08       	sbc	r0, r0
 8ea:	0f 93       	push	r16
 8ec:	08 30       	cpi	r16, 0x08	; 8
 8ee:	98 f0       	brcs	.+38     	; 0x916 <__lshrdi3+0x30>
 8f0:	08 50       	subi	r16, 0x08	; 8
 8f2:	23 2f       	mov	r18, r19
 8f4:	34 2f       	mov	r19, r20
 8f6:	45 2f       	mov	r20, r21
 8f8:	56 2f       	mov	r21, r22
 8fa:	67 2f       	mov	r22, r23
 8fc:	78 2f       	mov	r23, r24
 8fe:	89 2f       	mov	r24, r25
 900:	90 2d       	mov	r25, r0
 902:	f4 cf       	rjmp	.-24     	; 0x8ec <__lshrdi3+0x6>
 904:	05 94       	asr	r0
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	57 95       	ror	r21
 910:	47 95       	ror	r20
 912:	37 95       	ror	r19
 914:	27 95       	ror	r18
 916:	0a 95       	dec	r16
 918:	aa f7       	brpl	.-22     	; 0x904 <__lshrdi3+0x1e>
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <__adddi3_s8>:
 91e:	00 24       	eor	r0, r0
 920:	a7 fd       	sbrc	r26, 7
 922:	00 94       	com	r0
 924:	2a 0f       	add	r18, r26
 926:	30 1d       	adc	r19, r0
 928:	40 1d       	adc	r20, r0
 92a:	50 1d       	adc	r21, r0
 92c:	60 1d       	adc	r22, r0
 92e:	70 1d       	adc	r23, r0
 930:	80 1d       	adc	r24, r0
 932:	90 1d       	adc	r25, r0
 934:	08 95       	ret

00000936 <__cmpdi2_s8>:
 936:	00 24       	eor	r0, r0
 938:	a7 fd       	sbrc	r26, 7
 93a:	00 94       	com	r0
 93c:	2a 17       	cp	r18, r26
 93e:	30 05       	cpc	r19, r0
 940:	40 05       	cpc	r20, r0
 942:	50 05       	cpc	r21, r0
 944:	60 05       	cpc	r22, r0
 946:	70 05       	cpc	r23, r0
 948:	80 05       	cpc	r24, r0
 94a:	90 05       	cpc	r25, r0
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
